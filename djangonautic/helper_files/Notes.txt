USEFUL DJANGO COMMANDS
-----------------------

1. Create a project
django-admin startproject projectname

2. Run a server
python manage.py runserver

3. Create an app
python manage.py startapp appname

4. Create migration file
python manage.py makemigrations

5. Apply a migration created
python manage.py migrate

6. Create a user with access to the admin section
python manage.py createsuperuser


DJANGO ORM COMMANDS
--------------------
* Open the interactive console
    python manage.py shell

* Importing a model
    from modulename.models import modelname

* Work with instances
    instancename = Classname() # create an instance
    instancename.attributename = value # set an attribute

* Saving an instance to the database
    instancename.save()

* Retrive instances
    Classname.objects.all() # retrive all of them
    Classname.objects.all()[i] # retrive the ith instance

* Create a name-capturing group
    r"^(?P<slug>[\w-]+)/$"
  Meaning:
  It starts with a name-capturing group (?P<slug>[\w-]+) and ends in a /
  Name-capturing group starts with ?P that specifies the group is a name-capturing group. 
  The name of this group 'slug' is written b/w angular brackets <>.
  Then follows what this group will contain in regex. (Here, its one or more characters of any word character or hyphen.)


TROUBLESHOOTERS
----------------

* In urls.py file inside the urlpatterns list, you can specify path using either of the two methods:
    * path ('url', views.func_for_this_url)
    * url (r^'url_regex', vews.func_for_this_url)
  In case you should choose the latter you need to import:
  from django.conf.urls import url
  For both the cases, you need to import views:
  from . import views
  (The '.' means current directory)

* For returning HTTP Responses, in the views.py file, import:
    from django.http import HttpResponse
  And for each function:
    return HttpResponse("text / html")

* For rendering templates, in the views.py file, import:
    from django.shortcuts import render 
  And for each function:
    return render(request, "pagename.html")

* In case rendering templates don't work, open settings.py, scroll down to DIRS list inside TEMPLATES dictionary, and add 'templates' to the list. Make sure the templates folder is inside the root directory.

* After you create an app,
    * Register it inside the INSTALLED_APPS list of settings.py in the root directory.
    * Create appname/templates/appname directory for namespacing and avoiding conflicts.
    * Put all you HTML templates for this app inside the above directory.
    * Inside root/urls.py, import the include function from django.conf.urls and use this function to link all the urls in appname/urls.py:
        url (r'^appname/', include('appname.urls'))

* In order to render a page inside an app,
    return render(request, "appname/articles.html")

* Using named URLs
    * Create a URL in urlpatterns:
    url (r'url_regex', modulename.viewname, name="url_name")
    * In the rendering HTML page, use the template tag in the anchor tag
     <a href="{% url 'url_name' slug=article.slug_attribute %}"> Link text </a>

* For static files
    * Add these two variables in the settings.py file
        STATIC_URL = '/static/'
        STATICFILES_DIRS = [
            os.path.join(BASE_DIR, "static"),
        ]
    * Create the static folder as mentioned above.
    * Head over to urls.py file, and add the following lines
        from django.contrib.staticfiles.urls import staticfiles_urlpatterns
        urlpatterns += staticfiles_urlpatterns()
    * Put all your static files in this folder.

* For media files
    * Add these two variables in the settings.py file
        MEDIA_URL = "/media/"
        MEDIA_ROOT = os.path.join(BASE_DIR, "media")
    *  Head over to urls.py file, and add the following lines
        from django.conf.urls.static import static
		from django.conf import settings
        urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

* For the accounts app
    * make it, register it, include it, setup a urls.py for it, namespace it
    * use POST and GET cases for the app view, create UserCreationForm instance, and pass it in a dictionary for rendering
    * Inside the <form> field of the rendered page, make sure to use csrf_token in a template tag
    * Inside the <form> field of the rendered page, return the key from the dictionary passed
